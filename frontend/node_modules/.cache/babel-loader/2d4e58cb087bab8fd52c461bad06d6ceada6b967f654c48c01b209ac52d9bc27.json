{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sora\\\\Desktop\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport HomePage from './pages/HomePage';\nimport CartPage from './pages/CartPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [cart, setCart] = useState([]);\n\n  // Fetch cart from backend on initial load\n\n  useEffect(() => {\n    const fetchCart = async () => {\n      const response = await fetch('http://localhost:5000/api/cart');\n      const data = await response.json();\n      setCart(data);\n    };\n    fetchCart();\n  }, []);\n  const addToCart = async product => {\n    try {\n      const response = await fetch('http://localhost:5000/api/cart/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          productId: product._id\n        }) // Ensure you're sending the correct productId\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add item to cart');\n      }\n      const data = await response.json();\n      setCart(data); // Update the cart state with the response from the backend\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n    }\n  };\n  const removeFromCart = async productId => {\n    const response = await fetch('http://localhost:5000/api/cart/remove', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productId\n      })\n    });\n    const data = await response.json();\n    setCart(data);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(HomePage, {\n          addToCart: addToCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/cart\",\n        element: /*#__PURE__*/_jsxDEV(CartPage, {\n          cart: cart,\n          removeFromCart: removeFromCart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Navbar","HomePage","CartPage","jsxDEV","_jsxDEV","App","_s","cart","setCart","fetchCart","response","fetch","data","json","addToCart","product","method","headers","body","JSON","stringify","productId","_id","ok","Error","error","console","removeFromCart","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/Sora/Desktop/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n\nimport Navbar from './components/Navbar';\n\nimport HomePage from './pages/HomePage';\n\nimport CartPage from './pages/CartPage';\n\nconst App = () => {\n\n  const [cart, setCart] = useState([]);\n\n  // Fetch cart from backend on initial load\n\n  useEffect(() => {\n\n    const fetchCart = async () => {\n\n      const response = await fetch('http://localhost:5000/api/cart');\n\n      const data = await response.json();\n\n      setCart(data);\n\n    };\n\n    fetchCart();\n\n  }, []);\n\n  const addToCart = async (product) => {\n\n    try {\n\n      const response = await fetch('http://localhost:5000/api/cart/add', {\n\n        method: 'POST',\n\n        headers: { 'Content-Type': 'application/json' },\n\n        body: JSON.stringify({ productId: product._id }), // Ensure you're sending the correct productId\n\n      });\n\n      \n\n      if (!response.ok) {\n\n        throw new Error('Failed to add item to cart');\n\n      }\n\n  \n\n      const data = await response.json();\n\n      setCart(data); // Update the cart state with the response from the backend\n\n    } catch (error) {\n\n      console.error('Error adding to cart:', error);\n\n    }\n\n  };\n\n  \n\n  const removeFromCart = async (productId) => {\n\n    const response = await fetch('http://localhost:5000/api/cart/remove', {\n\n      method: 'POST',\n\n      headers: { 'Content-Type': 'application/json' },\n\n      body: JSON.stringify({ productId }),\n\n    });\n\n    const data = await response.json();\n\n    setCart(data);\n\n  };\n\n  return (\n\n    <Router>\n\n      <Navbar />\n\n      <Routes>\n\n        <Route path=\"/\" element={<HomePage addToCart={addToCart} />} />\n\n        <Route path=\"/cart\" element={<CartPage cart={cart} removeFromCart={removeFromCart} />} />\n\n      </Routes>\n\n    </Router>\n\n  );\n\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}